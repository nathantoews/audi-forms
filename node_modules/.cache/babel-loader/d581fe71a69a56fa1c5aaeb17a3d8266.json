{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/ntoews/Projects/audi-forms/components/PostUpvoter.js\";\nimport _JSXStyle from \"styled-jsx/style\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      mutation updatePost($id: ID!, $votes: Int) {\\n        updatePost(id: $id, votes: $votes) {\\n          id\\n          __typename\\n          votes\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { ApolloConsumer } from 'react-apollo';\nimport gql from 'graphql-tag';\nexport default function PostUpvoter(_ref) {\n  var votes = _ref.votes,\n      id = _ref.id;\n  return React.createElement(ApolloConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, function (client) {\n    return React.createElement(\"button\", {\n      onClick: function onClick() {\n        return upvotePost(votes, id, client);\n      },\n      className: \"jsx-889187495\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, votes, React.createElement(_JSXStyle, {\n      id: \"889187495\",\n      __self: this\n    }, \"button.jsx-889187495{background-color:transparent;border:1px solid #e4e4e4;color:#000;}button.jsx-889187495:active{background-color:transparent;}button.jsx-889187495:before{-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;border-color:transparent transparent #000000 transparent;border-style:solid;border-width:0 4px 6px 4px;content:'';height:0;margin-right:5px;width:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9udG9ld3MvUHJvamVjdHMvYXVkaS1mb3Jtcy9jb21wb25lbnRzL1Bvc3RVcHZvdGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVzQixBQUc0QyxBQUtBLEFBR1gsNkJBUE8sQUFLM0IseUJBSmEsV0FDYixNQU0yRCx5REFDdEMsbUJBQ1EsMkJBQ2hCLFdBQ0YsU0FDUSxpQkFDVCxRQUNWIiwiZmlsZSI6Ii9Vc2Vycy9udG9ld3MvUHJvamVjdHMvYXVkaS1mb3Jtcy9jb21wb25lbnRzL1Bvc3RVcHZvdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgQXBvbGxvQ29uc3VtZXIgfSBmcm9tICdyZWFjdC1hcG9sbG8nXG5pbXBvcnQgZ3FsIGZyb20gJ2dyYXBocWwtdGFnJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQb3N0VXB2b3RlciAoeyB2b3RlcywgaWQgfSkge1xuICByZXR1cm4gKFxuICAgIDxBcG9sbG9Db25zdW1lcj5cbiAgICAgIHtjbGllbnQgPT4gKFxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHVwdm90ZVBvc3Qodm90ZXMsIGlkLCBjbGllbnQpfT5cbiAgICAgICAgICB7dm90ZXN9XG4gICAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgICAgYnV0dG9uIHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNlNGU0ZTQ7XG4gICAgICAgICAgICAgIGNvbG9yOiAjMDAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnV0dG9uOmFjdGl2ZSB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnV0dG9uOmJlZm9yZSB7XG4gICAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcbiAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjMDAwMDAwIHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDAgNHB4IDZweCA0cHg7XG4gICAgICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgICAgICBoZWlnaHQ6IDA7XG4gICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNXB4O1xuICAgICAgICAgICAgICB3aWR0aDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBgfTwvc3R5bGU+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgKX1cbiAgICA8L0Fwb2xsb0NvbnN1bWVyPlxuICApXG59XG5cbmZ1bmN0aW9uIHVwdm90ZVBvc3QgKHZvdGVzLCBpZCwgY2xpZW50KSB7XG4gIGNsaWVudC5tdXRhdGUoe1xuICAgIG11dGF0aW9uOiBncWxgXG4gICAgICBtdXRhdGlvbiB1cGRhdGVQb3N0KCRpZDogSUQhLCAkdm90ZXM6IEludCkge1xuICAgICAgICB1cGRhdGVQb3N0KGlkOiAkaWQsIHZvdGVzOiAkdm90ZXMpIHtcbiAgICAgICAgICBpZFxuICAgICAgICAgIF9fdHlwZW5hbWVcbiAgICAgICAgICB2b3Rlc1xuICAgICAgICB9XG4gICAgICB9XG4gICAgYCxcbiAgICB2YXJpYWJsZXM6IHtcbiAgICAgIGlkLFxuICAgICAgdm90ZXM6IHZvdGVzICsgMVxuICAgIH0sXG4gICAgb3B0aW1pc3RpY1Jlc3BvbnNlOiB7XG4gICAgICBfX3R5cGVuYW1lOiAnTXV0YXRpb24nLFxuICAgICAgdXBkYXRlUG9zdDoge1xuICAgICAgICBfX3R5cGVuYW1lOiAnUG9zdCcsXG4gICAgICAgIGlkLFxuICAgICAgICB2b3Rlczogdm90ZXMgKyAxXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuIl19 */\\n/*@ sourceURL=/Users/ntoews/Projects/audi-forms/components/PostUpvoter.js */\"));\n  });\n}\n\nfunction upvotePost(votes, id, client) {\n  client.mutate({\n    mutation: gql(_templateObject()),\n    variables: {\n      id: id,\n      votes: votes + 1\n    },\n    optimisticResponse: {\n      __typename: 'Mutation',\n      updatePost: {\n        __typename: 'Post',\n        id: id,\n        votes: votes + 1\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/ntoews/Projects/audi-forms/components/PostUpvoter.js"],"names":["React","ApolloConsumer","gql","PostUpvoter","votes","id","client","upvotePost","mutate","mutation","variables","optimisticResponse","__typename","updatePost"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,eAAe,SAASC,WAAT,OAAqC;AAAA,MAAbC,KAAa,QAAbA,KAAa;AAAA,MAANC,EAAM,QAANA,EAAM;AAClD,SACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,UAAAC,MAAM;AAAA,WACL;AAAQ,MAAA,OAAO,EAAE;AAAA,eAAMC,UAAU,CAACH,KAAD,EAAQC,EAAR,EAAYC,MAAZ,CAAhB;AAAA,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,KADH;AAAA;AAAA;AAAA,m3FADK;AAAA,GADT,CADF;AA6BD;;AAED,SAASG,UAAT,CAAqBH,KAArB,EAA4BC,EAA5B,EAAgCC,MAAhC,EAAwC;AACtCA,EAAAA,MAAM,CAACE,MAAP,CAAc;AACZC,IAAAA,QAAQ,EAAEP,GAAF,mBADI;AAUZQ,IAAAA,SAAS,EAAE;AACTL,MAAAA,EAAE,EAAFA,EADS;AAETD,MAAAA,KAAK,EAAEA,KAAK,GAAG;AAFN,KAVC;AAcZO,IAAAA,kBAAkB,EAAE;AAClBC,MAAAA,UAAU,EAAE,UADM;AAElBC,MAAAA,UAAU,EAAE;AACVD,QAAAA,UAAU,EAAE,MADF;AAEVP,QAAAA,EAAE,EAAFA,EAFU;AAGVD,QAAAA,KAAK,EAAEA,KAAK,GAAG;AAHL;AAFM;AAdR,GAAd;AAuBD","sourcesContent":["import React from 'react'\nimport { ApolloConsumer } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nexport default function PostUpvoter ({ votes, id }) {\n  return (\n    <ApolloConsumer>\n      {client => (\n        <button onClick={() => upvotePost(votes, id, client)}>\n          {votes}\n          <style jsx>{`\n            button {\n              background-color: transparent;\n              border: 1px solid #e4e4e4;\n              color: #000;\n            }\n            button:active {\n              background-color: transparent;\n            }\n            button:before {\n              align-self: center;\n              border-color: transparent transparent #000000 transparent;\n              border-style: solid;\n              border-width: 0 4px 6px 4px;\n              content: '';\n              height: 0;\n              margin-right: 5px;\n              width: 0;\n            }\n          `}</style>\n        </button>\n      )}\n    </ApolloConsumer>\n  )\n}\n\nfunction upvotePost (votes, id, client) {\n  client.mutate({\n    mutation: gql`\n      mutation updatePost($id: ID!, $votes: Int) {\n        updatePost(id: $id, votes: $votes) {\n          id\n          __typename\n          votes\n        }\n      }\n    `,\n    variables: {\n      id,\n      votes: votes + 1\n    },\n    optimisticResponse: {\n      __typename: 'Mutation',\n      updatePost: {\n        __typename: 'Post',\n        id,\n        votes: votes + 1\n      }\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}